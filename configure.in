dnl
dnl Configuration input file for euracom
dnl
dnl Michael Bussmann <bus@mb-net.net>
dnl
dnl $Id: configure.in,v 1.12 2002/05/10 07:21:03 bus Exp $
dnl

AC_REVISION($Revision: 1.12 $)
AC_INIT(euracom.c)
AC_CONFIG_HEADER(config.h)
AC_PREFIX_DEFAULT(/usr/local)

dnl
dnl Set default variables
dnl
database=postgres
pidfile="/var/run/euracom.pid"
lockpath="/var/lock"
shutdowntimeout=120
recoverytimeout=900
recoveryfile="/tmp/euracom.recovery"
countrycode="49"
areacode=""
localcurrency="EUR"
databasename="isdn"

dbdir="/opt/postgreSQL"

dnl
dnl Check for programs
dnl
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PATH_PROG(FALSE, false, /usr/bin/false)
AC_PATH_PROG(TRUE, true, /usr/bin/true)
AC_PATH_PROG(RM, rm, $FALSE)

dnl
dnl What database?
dnl
AC_MSG_CHECKING(for PostgreSQL support)
AC_ARG_WITH(postgres,
[  --with-postgreSQL[=dir]	Use PostgreSQL ],
[
  dbdir=$withval
  database=postgres
  AC_MSG_RESULT($dbdir)
],
[ AC_MSG_RESULT(no) ]
)

AC_MSG_CHECKING(for msql support)
AC_ARG_WITH(msql,
[  --with-msql[=dir]		Use msql ],
[ dbdir=$withval
  database=msql
  AC_MSG_RESULT($dbdir)
],
[ AC_MSG_RESULT(no) ]
)

AC_MSG_CHECKING(for mysql support)
AC_ARG_WITH(mysql,
[  --with-mysql[=dir]		Use mysql ],
[ dbdir=$withval
  database=mysql
  AC_MSG_RESULT($dbdir)
],
[ AC_MSG_RESULT(no) ]
)

AC_MSG_CHECKING(what database to use after all)
AC_SUBST(database)
AC_MSG_RESULT($database)

dnl
dnl Check for libraries
dnl
AC_CHECK_LIB(pq, crypt)
AC_CHECK_LIB(crypt, crypt)

dnl
dnl Check header files
dnl

dnl
dnl Check for typedefs
dnl

dnl
dnl Check structures
dnl

dnl Check compiler characteristics
AC_C_CONST
dnl AC_C_INLINE
dnl AC_CHAR_UNSIGNED

dnl
dnl Check library functions
dnl
AC_CACHE_CHECK(if sys_errlist is already declared, ac_cv_needs_sys_errlist,
  AC_TRY_COMPILE([
    #include <stdio.h>
], [
    char *s = *(sys_errlist);
],
    ac_cv_needs_sys_errlist="yes",
    ac_cv_needs_sys_errlist="no")
)
if test "$ac_cv_needs_sys_errlist" = "no" ; then
  AC_DEFINE(NEED_SYS_ERRLIST)
fi

AC_REPLACE_FUNCS(strerror)
AC_CHECK_FUNC(getopt_long,
[],
[ LIBOBJS="${LIBOBJS} getopt.o getopt1.o" ]
)

dnl
dnl Check system services
dnl

dnl
dnl Optional features
dnl
AC_MSG_CHECKING(if we're including all debugging code)
AC_ARG_ENABLE(debugging,
[  --enable-debugging		include debugging code (yes)],
[ myres=$enableval ],
[ myres=yes ])
if test "$myres" = "yes"; then
  AC_DEFINE(DEBUG)
fi
AC_MSG_RESULT($myres)

AC_MSG_CHECKING(whether KIT DUMP mode should be enabled)
AC_ARG_ENABLE(kit-dump-mode,
[  --disable-kit-dump-mode	disable support KIT DUMP mode (enabled)],
[ myres=$enableval ],
[ myres=yes ])
if test "$myres" = "yes"; then
  AC_DEFINE(KIT_DUMP_MODE)
fi
AC_MSG_RESULT($myres)

AC_MSG_CHECKING(if we should check for CTS)
AC_ARG_ENABLE(cts-check,
[  --disable-cts-check		don't check for CTS (do check)],
[ myres=$enableval ],
[ myres=yes ])
if test "$myres" = "no"; then
  AC_DEFINE(DONT_CHECK_CTS)
fi
AC_MSG_RESULT($myres)

AC_MSG_CHECKING(for special alex flag)
AC_ARG_WITH(alex,
[  --with-alex                   testflag],
[ myres=$withval ],
[ myres=no ])
if test "$myres" = "yes"; then
        AC_DEFINE(ALEX_FLAG)
fi
AC_MSG_RESULT($myres)

AC_MSG_CHECKING(firmware release)
AC_ARG_WITH(firmware,
[  --with-firmware={1,2,3,4}	compile for euracom f/w 1.x, 2.x or 3.x,4.x],
[ 
  case "$withval" in
    1) AC_MSG_RESULT(firmware 1.x)
       AC_DEFINE_UNQUOTED(FIRMWARE_MAJOR, 1)
       ;;
    2) AC_MSG_RESULT(firmware 2.x)
       AC_DEFINE_UNQUOTED(FIRMWARE_MAJOR, 2)
       ;;
    3) AC_MSG_RESULT(firmware 3.x)
       AC_DEFINE_UNQUOTED(FIRMWARE_MAJOR, 3)
       ;;
    4) AC_MSG_RESULT(firmware 4.x)
       AC_DEFINE_UNQUOTED(FIRMWARE_MAJOR, 3)
       ;;
    *) AC_ERROR(Only firmware releases 1 2 3 or 4 are supported)
       ;;
  esac
],
[ 
  AC_MSG_RESULT(firmware 4.x)
  AC_MSG_WARN(No firmware revision specified.  Assuming f/w major 4)
  AC_DEFINE_UNQUOTED(FIRMWARE_MAJOR, 3)
]
)

AC_MSG_CHECKING(location of PID file)
AC_ARG_WITH(pidfile,
[  --with-pidfile=full-path	Location of PID file (/var/run/euracom.pid)],
[
  pidfile=$withval
]
)
AC_MSG_RESULT($pidfile)
AC_DEFINE_UNQUOTED(PIDFILE, "${pidfile}")

AC_MSG_CHECKING(location of lock file)
AC_ARG_WITH(lockpath,
[  --with-lockpath=lock-dir	Location of lockfile (/var/lock)],
[
  lockpath=$withval
]
)
AC_MSG_RESULT($lockpath)
AC_DEFINE_UNQUOTED(LOCKPATH, "${lockpath}")

AC_MSG_CHECKING(for default shutdown timeout)
AC_ARG_WITH(shutdown-timeout,
[  --with-shutdown-timeout=sec	Drop connection after x seconds idle time (120)],
[  shutdowntimeout=$withval
]
)
AC_MSG_RESULT($shutdowntimeout seconds)
AC_DEFINE_UNQUOTED(SHUTDOWN_TIMEOUT, $shutdowntimeout)

AC_MSG_CHECKING(for default recovery timeout)
AC_ARG_WITH(recovery-timeout,
[  --with-recovery-timeout=sec	Re-establish connection after x seconds (900)],
[  recoverytimeout=$withval
]
)
AC_MSG_RESULT($recoverytimeout seconds)
AC_DEFINE_UNQUOTED(RECOVERY_TIMEOUT, $recoverytimeout)

AC_MSG_CHECKING(for recovery file)
AC_ARG_WITH(recovery-file,
[  --with-recovery-file=file	Name of recovery file (/tmp/euracom.recovery)],
[  recoveryfile=$withval
]
)
AC_MSG_RESULT($recoveryfile)
AC_DEFINE_UNQUOTED(RECOVERY_FILE, "${recoveryfile}")

AC_MSG_CHECKING(for your country code)
AC_ARG_WITH(country-code,
[  --with-country-code=xx	Your international country code (49)],
[  countrycode=$withval ]
)
AC_MSG_RESULT(+$countrycode)
if test "$countrycode" -ge "0";
then
  AC_DEFINE_UNQUOTED(COUNTRYCODE, "+${countrycode}")
else
  AC_ERROR(Invalid countycode (e.g. use 49 for germany))
fi

AC_MSG_CHECKING(for your area prefix code)
AC_ARG_WITH(area-code,
[  --with-area-code=xxx		Your area code (no leading 0) (no default)],
[  areacode=$withval
   AC_DEFINE_UNQUOTED(AREACODE, "+${countrycode}${areacode}")
],
[  areacode=""
  AC_ERROR(you must specify an areacode (e.g. 2364))
]
)
AC_MSG_RESULT($areacode)

AC_MSG_CHECKING(for name of local currency)
AC_ARG_WITH(currency-name,
[  --with-currency-name=xxx	Name of your local currency (EUR)],
[  localcurrency=$withval
]
)
AC_MSG_RESULT($localcurrency)
AC_DEFINE_UNQUOTED(LOCAL_CURRENCY, "${localcurrency}")

AC_MSG_CHECKING(for database name)
AC_ARG_WITH(database-name,
[  --with-database-name=xxx	Name of the database to connect to (isdn)],
[  databasename=$withval
]
)
AC_MSG_RESULT($databasename)
AC_DEFINE_UNQUOTED(DEF_DB, "${databasename}")

dnl
dnl Write output file
dnl
AC_OUTPUT(Makefile)
